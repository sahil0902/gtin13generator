"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRealFormat = exports.minify = exports.getFormat = exports.isValid = exports.isGTIN = exports.upcE = void 0;
const common_1 = require("./common");
const upcE = __importStar(require("./upc-e"));
exports.upcE = upcE;
function isGTIN(barcode) {
    if (typeof barcode !== 'string')
        throw new Error(common_1.NONSTRING_ERR);
    if (barcode === '')
        throw new Error(common_1.EMPTY_CODE_ERR);
    return (/^(\d{12,14}|\d{8})$/.test(barcode));
}
exports.isGTIN = isGTIN;
function assertIsGTIN(barcode) {
    if (!isGTIN(barcode))
        throw new Error(common_1.FORMAT_ERR);
}
function isValid(barcode) {
    assertIsGTIN(barcode);
    const checkDigit = barcode.slice(-1);
    const generatedCheckDigit = common_1.generateCheckDigit(barcode.slice(0, -1));
    return checkDigit === generatedCheckDigit;
}
exports.isValid = isValid;
function getFormat(barcode) {
    assertIsGTIN(barcode);
    return `GTIN-${barcode.length}`;
}
exports.getFormat = getFormat;
function minify(barcode) {
    assertIsGTIN(barcode);
    const format = getFormat(barcode);
    switch (format) {
        case 'GTIN-14':
            return barcode.replace(/^(0{6}|0{1,2})/, '');
        case 'GTIN-13':
            return barcode.replace(/^(0{5}|0{1})/, '');
        case 'GTIN-12':
            return barcode.replace(/^0{4}/, '');
        case 'GTIN-8':
            return barcode;
    }
    throw new Error('Unknown barcode format');
}
exports.minify = minify;
function getRealFormat(barcode) {
    return getFormat(minify(barcode));
}
exports.getRealFormat = getRealFormat;
